import pandas as pd
import scipy.stats as stats
import statsmodels.api as sm
from sklearn.metrics import mean_squared_error

# ================================
# Load Heart Disease dataset
# ================================
# Make sure you have the CSV downloaded locally
df = pd.read_csv(r'C:\Users\Parthiban\Downloads\heart.csv')

# Example variables
x = df["age"]        # Independent variable
y = df["chol"]       # Dependent variable (cholesterol)

# ================================
# Correlation
# ================================
corr, p_value = stats.pearsonr(x, y)
print(f"Correlation coefficient: {corr:.3f}, p-val: {p_value:.3e}")

# ================================
# Linear Regression
# ================================
x_const = sm.add_constant(x)
model = sm.OLS(y, x_const).fit()
intercept, slope = model.params
print(f"Intercept: {intercept:.3f}")
print(f"Slope: {slope:.3f}")

# Predictions (first 10 only)
pred_y = model.predict(x_const)
print(f"Predicted cholesterol: {pred_y[:10].round(2).tolist()}")

# Mean Squared Error
mse = mean_squared_error(y, pred_y)
print(f"Mean squared error: {mse:.3f}")

# Example prediction
age_value = 50
pred_example = model.predict([1, age_value])
print(f"Predicted cholesterol for age={age_value}: {pred_example[0]:.2f}")

# ================================
# Optional: Z-test, T-test, F-test
# ================================
# Z-test: Is mean cholesterol different from 200?
mu0 = 200
n = len(y)
z_stat = (y.mean() - mu0) / (y.std(ddof=1)/n**0.5)
p_z = 2*(1 - stats.norm.cdf(abs(z_stat)))
print(f"Z-test: Z={z_stat:.3f}, p-val={p_z:.3e}")

# T-test
t_stat, p_t = stats.ttest_1samp(y, mu0)
print(f"T-test: t={t_stat:.3f}, p-val={p_t:.3e}")

# F-test: variance of cholesterol vs resting blood pressure
f_stat = y.var(ddof=1)/df["trestbps"].var(ddof=1)
print(f"F-test: F={f_stat:.3f}")



